From 58396f14b1732fd25cb4ad965a9353f48e1b97f7 Mon Sep 17 00:00:00 2001
From: Miao Wang <shankerwangmiao@gmail.com>
Date: Sun, 14 Jan 2024 15:51:49 +0800
Subject: [PATCH 06/10] add syscall fallback for *stat(at)?

---
 sysdeps/unix/sysv/linux/loongarch/fstatat64.c | 13 ++++
 sysdeps/unix/sysv/linux/loongarch/fxstat64.c  | 67 ++++++++++++++++
 .../unix/sysv/linux/loongarch/fxstatat64.c    | 61 +++++++++++++++
 sysdeps/unix/sysv/linux/loongarch/lxstat64.c  | 77 +++++++++++++++++++
 .../unix/sysv/linux/loongarch/ow_syscall_nr.h |  2 +
 sysdeps/unix/sysv/linux/loongarch/xstat64.c   | 71 +++++++++++++++++
 6 files changed, 291 insertions(+)
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/fstatat64.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/fxstat64.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/fxstatat64.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/lxstat64.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/ow_syscall_nr.h
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/xstat64.c

diff --git a/sysdeps/unix/sysv/linux/loongarch/fstatat64.c b/sysdeps/unix/sysv/linux/loongarch/fstatat64.c
new file mode 100644
index 00000000..a437eeaa
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/fstatat64.c
@@ -0,0 +1,13 @@
+#include <shlib-compat.h>
+
+#if LIB_COMPAT(libc, GLIBC_2_27, GLIBC_2_36)
+# include <kernel-features.h>
+# ifdef __ASSUME_STATX
+#  undef __ASSUME_STATX
+# endif
+// Hack: force use statx for fstatat64 even __NR_newfstatat is available
+# define STAT_HAS_TIME32
+# include "ow_syscall_nr.h"
+#endif
+
+#include <sysdeps/unix/sysv/linux/fstatat64.c>
diff --git a/sysdeps/unix/sysv/linux/loongarch/fxstat64.c b/sysdeps/unix/sysv/linux/loongarch/fxstat64.c
new file mode 100644
index 00000000..f7174ea8
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/fxstat64.c
@@ -0,0 +1,67 @@
+/* fxstat64 using Linux fstat64/statx system call.
+   Copyright (C) 1997-2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#define __fxstat __redirect___fxstat
+#include <sys/stat.h>
+#undef __fxstat
+#include <fcntl.h>
+#include <kernel_stat.h>
+#include <sysdep.h>
+#include <xstatconv.h>
+#include <statx_cp.h>
+#include <shlib-compat.h>
+#include "ow_syscall_nr.h"
+
+#if LIB_COMPAT(libc, GLIBC_2_0, GLIBC_2_33)
+
+/* Get information about the file FD in BUF.  */
+
+int
+___fxstat64 (int vers, int fd, struct stat64 *buf)
+{
+  /* New 32-bit kABIs with only 64-bit time_t support, e.g. arc, riscv32.  */
+  struct statx tmp;
+  int r = INLINE_SYSCALL_CALL (statx, fd, "", AT_EMPTY_PATH,
+			       STATX_BASIC_STATS, &tmp);
+  if (r == 0) {
+    __cp_stat64_statx (buf, &tmp);
+    return r;
+  } else if (errno != ENOSYS) {
+    return r;
+  }
+#if defined __NR_fstat
+ if (vers == _STAT_VER_KERNEL || vers == _STAT_VER_LINUX)
+    return INLINE_SYSCALL_CALL (fstat, fd, buf);
+  return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
+#endif
+  return r;
+}
+
+#if SHLIB_COMPAT(libc, GLIBC_2_1, GLIBC_2_2)
+versioned_symbol (libc, ___fxstat64, __fxstat64, GLIBC_2_2);
+strong_alias (___fxstat64, __old__fxstat64)
+compat_symbol (libc, __old__fxstat64, __fxstat64, GLIBC_2_1);
+#else
+strong_alias (___fxstat64, __fxstat64)
+#endif
+
+#if XSTAT_IS_XSTAT64
+strong_alias (___fxstat64, __fxstat)
+#endif
+
+#endif /* LIB_COMPAT  */
diff --git a/sysdeps/unix/sysv/linux/loongarch/fxstatat64.c b/sysdeps/unix/sysv/linux/loongarch/fxstatat64.c
new file mode 100644
index 00000000..720f12a0
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/fxstatat64.c
@@ -0,0 +1,61 @@
+/* fxstatat64 used on fstatat64, Linux implementation.
+   Copyright (C) 2005-2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#define __fxstatat __redirect___fxstatat
+#include <sys/stat.h>
+#undef __fxstatat
+#include <fcntl.h>
+#include <kernel_stat.h>
+#include <sysdep.h>
+#include <xstatconv.h>
+#include <statx_cp.h>
+#include <shlib-compat.h>
+#include "ow_syscall_nr.h"
+
+#if LIB_COMPAT(libc, GLIBC_2_4, GLIBC_2_33)
+
+/* Get information about the file FD in BUF.  */
+
+int
+__fxstatat64 (int vers, int fd, const char *file, struct stat64 *st, int flag)
+{
+  /* New 32-bit kABIs with only 64-bit time_t support, e.g. arc, riscv32.  */
+  if (vers == _STAT_VER_KERNEL)
+    {
+      struct statx tmp;
+      int r = INLINE_SYSCALL_CALL (statx, fd, file, AT_NO_AUTOMOUNT | flag,
+				   STATX_BASIC_STATS, &tmp);
+      if (r == 0) {
+	      __cp_stat64_statx (st, &tmp);
+        return r;
+      }else if (errno != ENOSYS){
+        return r;
+      }
+#if defined __NR_newfstatat
+    return INLINE_SYSCALL_CALL (newfstatat, fd, file, st, flag);
+#endif
+      return r;
+    }
+  return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
+}
+
+#if XSTAT_IS_XSTAT64
+strong_alias (__fxstatat64, __fxstatat)
+#endif
+
+#endif /* LIB_COMPAT(libc, GLIBC_2_4, GLIBC_2_33)  */
diff --git a/sysdeps/unix/sysv/linux/loongarch/lxstat64.c b/sysdeps/unix/sysv/linux/loongarch/lxstat64.c
new file mode 100644
index 00000000..ab561ce0
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/lxstat64.c
@@ -0,0 +1,77 @@
+/* lxstat64 using Linux lstat64 system call.
+   Copyright (C) 1991-2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#define __lxstat __redirect___lxstat
+#include <sys/stat.h>
+#undef __lxstat
+#include <fcntl.h>
+#include <kernel_stat.h>
+#include <sysdep.h>
+#include <xstatconv.h>
+#include <statx_cp.h>
+#include <shlib-compat.h>
+#include "ow_syscall_nr.h"
+
+#if LIB_COMPAT(libc, GLIBC_2_1, GLIBC_2_33)
+
+/* Get information about the file NAME in BUF.  */
+
+int
+___lxstat64 (int vers, const char *name, struct stat64 *buf)
+{
+  /* New kABIs which uses generic 64-bit Linux ABI, e.g. aarch64, riscv64.  */
+  if (vers == _STAT_VER_KERNEL)
+    return INLINE_SYSCALL_CALL (newfstatat, AT_FDCWD, name, buf,
+				AT_SYMLINK_NOFOLLOW);
+
+  /* New 32-bit kABIs with only 64-bit time_t support, e.g. arc, riscv32.  */
+  if (vers == _STAT_VER_KERNEL)
+    {
+      struct statx tmp;
+      int r = INLINE_SYSCALL_CALL (statx, AT_FDCWD, name,
+				   AT_NO_AUTOMOUNT | AT_SYMLINK_NOFOLLOW,
+				   STATX_BASIC_STATS, &tmp);
+      if (r == 0) {
+	      __cp_stat64_statx (buf, &tmp);
+        return r;
+      }else if(errno != ENOSYS){
+        return r;
+      }
+#if defined __NR_newfstatat
+      return INLINE_SYSCALL_CALL (newfstatat, AT_FDCWD, name, buf,
+          AT_SYMLINK_NOFOLLOW);
+#endif
+      return r;
+     }
+
+  return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
+}
+
+#if SHLIB_COMPAT(libc, GLIBC_2_1, GLIBC_2_2)
+versioned_symbol (libc, ___lxstat64, __lxstat64, GLIBC_2_2);
+strong_alias (___lxstat64, __old__lxstat64)
+compat_symbol (libc, __old__lxstat64, __lxstat64, GLIBC_2_1);
+#else
+strong_alias (___lxstat64, __lxstat64);
+#endif
+
+#if XSTAT_IS_XSTAT64
+strong_alias (___lxstat64,__lxstat)
+#endif
+
+#endif /* LIB_COMPAT  */
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_syscall_nr.h b/sysdeps/unix/sysv/linux/loongarch/ow_syscall_nr.h
new file mode 100644
index 00000000..61886aeb
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_syscall_nr.h
@@ -0,0 +1,2 @@
+#define __NR_newfstatat 79
+#define __NR_fstat 80
diff --git a/sysdeps/unix/sysv/linux/loongarch/xstat64.c b/sysdeps/unix/sysv/linux/loongarch/xstat64.c
new file mode 100644
index 00000000..c30f52e9
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/xstat64.c
@@ -0,0 +1,71 @@
+/* xstat64 using Linux stat64 system call.
+   Copyright (C) 1991-2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#define __xstat __redirect___xstat
+#include <sys/stat.h>
+#undef __xstat
+#include <fcntl.h>
+#include <kernel_stat.h>
+#include <sysdep.h>
+#include <xstatconv.h>
+#include <statx_cp.h>
+#include <shlib-compat.h>
+#include "ow_syscall_nr.h"
+
+#if LIB_COMPAT(libc, GLIBC_2_0, GLIBC_2_33)
+
+/* Get information about the file NAME in BUF.  */
+
+int
+___xstat64 (int vers, const char *name, struct stat64 *buf)
+{
+  /* New 32-bit kABIs with only 64-bit time_t support, e.g. arc, riscv32.  */
+  if (vers == _STAT_VER_KERNEL)
+    {
+      struct statx tmp;
+      int r = INLINE_SYSCALL_CALL (statx, AT_FDCWD, name, AT_NO_AUTOMOUNT,
+				   STATX_BASIC_STATS, &tmp);
+      if (r == 0) {
+        __cp_stat64_statx (buf, &tmp);
+        return r;
+      }else if(errno != ENOSYS){
+        return r;
+      }
+#if defined __NR_newfstatat
+      return INLINE_SYSCALL_CALL (newfstatat, AT_FDCWD, name, buf, 0);
+#endif
+      return r;
+     }
+
+  return INLINE_SYSCALL_ERROR_RETURN_VALUE (EINVAL);
+}
+
+#if XSTAT_IS_XSTAT64
+strong_alias (___xstat64, __xstat)
+#endif
+
+#if SHLIB_COMPAT(libc, GLIBC_2_1, GLIBC_2_2)
+versioned_symbol (libc, ___xstat64, __xstat64, GLIBC_2_2);
+strong_alias (___xstat64, __old__xstat64)
+compat_symbol (libc, __old__xstat64, __xstat64, GLIBC_2_1);
+#else
+strong_alias (___xstat64, __xstat64)
+#endif
+
+
+#endif /* LIB_COMPAT  */
-- 
2.43.0

