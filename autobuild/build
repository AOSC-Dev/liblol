#!/bin/bash
abinfo "Loading Autobuild elf handler functions ..."
abrequire elf

abinfo "Setting up build environment ..."
OWTARGET="loongarch64-aosc-linux-gnuow"
LOLPREFIX="/opt/lol"

abinfo "Appending -O2 to CPPFLAGS to fix build ..."
export CPPFLAGS="${CPPFLAGS} -O2"

binutils_source() {
    abinfo "Extracting Binutils source deb"
    mkdir -p "$BLDDIR/unpack/binutils"
    dpkg-deb --extract "$SRCDIR/binutils-source.deb" "$BLDDIR/unpack/binutils"
    local BINUTILS_DIR="$BLDDIR/unpack/binutils/usr/src/binutils"
    local BINUTILS_SRC_TAR=( "$BINUTILS_DIR"/binutils-*.xz )
    local patch

    abinfo "Setting up Binutils source tree ..."
    abinfo "Unpacking Binutils source tar $BINUTILS_SRC_TAR ..."
    mkdir -pv "$BLDDIR/src/binutils"
    tar \
        -C "$BLDDIR/src/binutils" \
        -xvJ \
        --strip-components=1 \
        -f "$BINUTILS_SRC_TAR"
}

binutils_build() {
    mkdir -pv "$BLDDIR/build/binutils"

    pushd "$BLDDIR/build/binutils"
    "$BLDDIR/src/binutils/configure" \
        --target="$OWTARGET" \
        --disable-werror \
        --prefix="$LOLPREFIX" \
        --program-prefix="$OWTARGET-"
    make
    mkdir -pv "$BLDDIR/toolchainroot"
    make install \
        DESTDIR="$BLDDIR/toolchainroot"
    popd

    [ -x "$BLDDIR/toolchainroot$LOLPREFIX/bin/$OWTARGET-ld" ]
}

gcc_source() {
    local GCC_VER=8
    abinfo "Extracting GCC sources ..."
    mkdir -pv "$BLDDIR/unpack/gcc"
    dpkg-deb \
        --extract \
        --verbose "$SRCDIR/gcc-$GCC_VER-source.deb" \
        "$BLDDIR/unpack/gcc"
    local GCC_DIR="$BLDDIR/unpack/gcc/usr/src/gcc-$GCC_VER"
    local GCC_SRC_TAR=( "$GCC_DIR"/gcc-*.xz )
    local patch

    abinfo "Setting up GCC source tree ..."
    abinfo "Unpacking GCC source tar $GCC_SRC_TAR ..."
    mkdir -pv "$BLDDIR/src/gcc/src"
    tar \
        -C "$BLDDIR/src/gcc/src" \
        -xvJ \
        --strip-components=1 \
        -f "$GCC_SRC_TAR"

    abinfo "Applying patches ..."
    while IFS= read -r patch; do
        abinfo "Applying $patch ..."
        patch -p 1 -d "$BLDDIR/src/gcc" \
            < "$GCC_DIR/patches/$patch"
    done < <(sed '/^ *#/d; s/ -p.*$//' "$GCC_DIR/patches/series")
}

gcc_build() {
    mkdir -pv "$BLDDIR/build/gcc"

    pushd "$BLDDIR/build/gcc"
    local new_PATH="$PATH:$BLDDIR/toolchainroot/$LOLPREFIX/bin"
    local PATH="$new_PATH"

    "$BLDDIR/src/gcc/src/configure" \
        --target="$OWTARGET" \
        --disable-werror \
        --prefix="$LOLPREFIX" \
        --program-prefix="$OWTARGET-" \
        --with-build-time-tools="$BLDDIR/toolchainroot/$LOLPREFIX/bin" \
        --with-build-sysroot="$BLDDIR/toolchainroot" \
        --enable-languages=c \
        --enable-shared \
        --without-included-gettext \
        --enable-threads=posix \
        --enable-nls \
        --enable-clocale=gnu \
        --with-default-libstdcxx-abi=new \
        --enable-gnu-unique-object \
        --disable-libitm \
        --disable-libsanitizer \
        --disable-libquadmath \
        --disable-libquadmath-support \
        --enable-plugin \
        --with-system-zlib \
        --enable-multiarch \
        --disable-werror \
        --with-arch=loongarch64 \
        --with-abi=lp64 \
        --enable-tls \
        --disable-host-shared \
        --disable-emultls \
        --with-gcc-major-version-only
    make all-gcc
    make install-gcc \
        DESTDIR="$BLDDIR/toolchainroot"
    popd

    [ -x "$BLDDIR/toolchainroot$LOLPREFIX/bin/$OWTARGET-gcc" ]
}

linux_libc_install() {
    abinfo "Extracting Linux API headers (linux-libc-dev) ..."
    mkdir -pv "$BLDDIR/unpack/linux-libc"
    dpkg-deb \
        --extract "$SRCDIR/linux-libc-dev.deb" \
        "$BLDDIR/unpack/linux-libc"

    abinfo "Copying Linux API headers ..."
    cp -v -a "$BLDDIR/unpack/linux-libc/usr/include/." \
        "$BLDDIR/toolchainroot/$LOLPREFIX/$OWTARGET/include/"
    (
        shopt -s dotglob
        mv -v "$BLDDIR/toolchainroot/$LOLPREFIX/$OWTARGET/include/loongarch64-linux-gnu/"* \
            "$BLDDIR/toolchainroot/$LOLPREFIX/$OWTARGET/include/"
    )

    rmdir -v "$BLDDIR/toolchainroot/$LOLPREFIX/$OWTARGET/include/loongarch64-linux-gnu/"
}

libgcc_install() {
    abinfo "Extracting GCC runtime (libgcc-dev) ..."
    mkdir -pv "$BLDDIR/unpack/libgcc"
    dpkg-deb \
        --extract "$SRCDIR/libgcc-dev.deb" \
        "$BLDDIR/unpack/libgcc"

    abinfo "Copying GCC runtime ..."
    cp -av "$BLDDIR/unpack/libgcc/usr/lib/gcc/loongarch64-linux-gnu/8/." \
        "$BLDDIR/toolchainroot/$LOLPREFIX/lib/gcc/$OWTARGET/8/"
}

apply_source_patch_series() {
    local patch_path=$1
    local src_path=$2
    local package=$3
    local patch

    abinfo "Applying $package patches ..."
    while IFS= read -r patch; do
        abinfo "  Applying $patch ..."
        patch -p 1 --ignore-whitespace -d "$src_path" \
            < "$patch_path/$patch"
    done <"$patch_path/series"
}

glibc_source() {
    abinfo "Extracting Glibc sources ..."
    mkdir -pv "$BLDDIR/unpack/glibc"
    dpkg-deb \
        --extract "$SRCDIR/glibc-source.deb" \
        "$BLDDIR/unpack/glibc"

    local GLIBC_DIR="$BLDDIR/unpack/glibc/usr/src/glibc"
    local GLIBC_SRC_TAR=( "$GLIBC_DIR"/glibc-*.xz )

    abinfo "Setting up Glibc source tree ..."
    abinfo "Unpacking Glibc source tar $GLIBC_SRC_TAR ..."
    mkdir -pv "$BLDDIR/src/glibc"
    tar \
        -C "$BLDDIR/src/glibc" \
        -xvJ \
        --strip-components=1 \
        -f "$GLIBC_SRC_TAR"
    apply_source_patch_series \
        "$SRCDIR/autobuild/patches/glibc" \
        "$BLDDIR/src/glibc" \
        "Glibc"
}

glibc_build() {
    mkdir -pv "$BLDDIR/build/glibc"

    pushd "$BLDDIR/build/glibc"
    local new_PATH="$BLDDIR/make-bin/usr/bin:$PATH:$BLDDIR/toolchainroot/$LOLPREFIX/bin"
    local GLIBC_VER="2.28"

    cat > configparms <<EOF
install_root = \$(DESTDIR)
exec_prefix = \${prefix}
datarootdir = /usr/share
libdir = \${exec_prefix}/lib/$OWTARGET
slibdir = \${exec_prefix}/lib/$OWTARGET
extra_libdir = \${exec_prefix}/lib
rtlddir = /lib64
libexecdir = \${exec_prefix}/lib
rootsbindir = \${exec_prefix}/sbin
complocaledir = /usr/lib/locale
localtime-file = /etc/localtime

CFLAGS = -pipe -O2 -g -ffile-prefix-map=$BLDDIR=.
ASFLAGS = -pipe -O2 -g -ffile-prefix-map=$BLDDIR=.
BUILD_CFLAGS = -O2 -g -ffile-prefix-map=$BLDDIR=.
LDFLAGS = -Wl,-O1,--sort-common,--as-needed -Wl,-build-id=sha1
EOF

    env -i "PATH=$new_PATH" \
        "$BLDDIR/src/glibc/configure" \
            --target="$OWTARGET" \
            --host="$OWTARGET" \
            --disable-werror \
            --prefix="$LOLPREFIX" \
            --enable-obsolete-rpc \
            CC="$OWTARGET-gcc" \
            AR="$OWTARGET-ar" \
            LD="$OWTARGET-ld"
    env -i "PATH=$new_PATH" "MAKEFLAGS=$MAKEFLAGS" \
        make "$PWD/libc_pic.a"
    env -i "PATH=$new_PATH" "MAKEFLAGS=$MAKEFLAGS" \
        make -C "$BLDDIR/src/glibc/elf" "$PWD/elf/ld.so.1" \
            subdir=elf \
            ..=../ \
            objdir="$PWD"
    env -i "PATH=$new_PATH" "MAKEFLAGS=$MAKEFLAGS" \
        make "$PWD/libc.so" "nptl/subdir_lib"
    env -i "PATH=$new_PATH" \
        make elf/ldso_install "$PKGDIR$LOLPREFIX/lib/$OWTARGET/libc.so.6" \
            DESTDIR="$PKGDIR"
    env -i "PATH=$new_PATH" \
        make -C "$BLDDIR/src/glibc/nptl" \
            "$PKGDIR$LOLPREFIX/lib/$OWTARGET/libpthread.so" \
	    subdir=nptl \
	    ..=../ \
            objdir="$PWD" \
	    DESTDIR="$PKGDIR"

    mkdir -pv "$PKGDIR/usr/lib" #/lib64 is /usr/lib on AOSC
    ln -sfvr "$PKGDIR$LOLPREFIX/lib/$OWTARGET/ld-$GLIBC_VER.so" \
        "$PKGDIR/usr/lib/ld.so.1"
    popd

    [ -x "$PKGDIR$LOLPREFIX/lib/$OWTARGET/ld-$GLIBC_VER.so" ]
}

patch_elf_rpath() {
    local lib=$1
    local newrpath=$2
    abinfo "Patching $lib ..."
    patchelf \
        --debug \
        --page-size "$((16 * 1024))" \
        --set-rpath "$newrpath" \
        "$PKGDIR$LOLPREFIX/lib/$OWTARGET/$lib"
    local newpath=$(patchelf --print-rpath "$PKGDIR$LOLPREFIX/lib/$OWTARGET/$lib")
    if [ "$newrpath" != "$newpath" ]; then
        abdie "Patch $lib unsuccessful"
    fi
}

install_additional_libs() {
    abinfo "Extracting extra runtime components ..."
    mkdir -pv "$BLDDIR/unpack/add_libs"
    for i in "$SRCDIR/dist_"*.deb; do
        abinfo "Extracting $i ..."
        dpkg-deb \
            --extract "$i" \
            "$BLDDIR/unpack/add_libs"
    done

    abinfo "Moving files to the correct prefix ..."
    cp -nva "$BLDDIR/unpack/add_libs/lib/loongarch64-linux-gnu/." \
        "$PKGDIR$LOLPREFIX/lib/$OWTARGET/"
    cp -nva "$BLDDIR/unpack/add_libs/usr/lib/loongarch64-linux-gnu/." \
        "$PKGDIR$LOLPREFIX/lib/$OWTARGET/"
    rm -v "$PKGDIR$LOLPREFIX/lib/$OWTARGET/gconv/gconv-modules.cache"

    abinfo "Configuring runtime ..."
    iconvconfig \
        --nostdlib \
        --prefix="$PKGDIR" \
        "$LOLPREFIX/lib/$OWTARGET/gconv/" \
        -o "$PKGDIR$LOLPREFIX/lib/$OWTARGET/gconv/gconv-modules.cache"
    mkdir -pv "$PKGDIR$LOLPREFIX/etc/ld.so.conf.d"
    echo "include $LOLPREFIX/etc/ld.so.conf.d/*.conf" \
        > "$PKGDIR$LOLPREFIX/etc/ld.so.conf"
    echo "$LOLPREFIX/lib/$OWTARGET/libglvnd" \
        > "$PKGDIR$LOLPREFIX/etc/ld.so.conf.d/10_gpudrv_path.conf"
    echo "$LOLPREFIX/lib/$OWTARGET" \
        > "$PKGDIR$LOLPREFIX/etc/ld.so.conf.d/$OWTARGET.conf"
    mkdir -pv "$PKGDIR/usr/share/gpudriverpath"
    sed 's@/usr/lib/loongarch64-linux-gnu@'"$LOLPREFIX/lib/$OWTARGET"'@' "$BLDDIR/unpack/add_libs/usr/share/gpudriverpath/gsgpu_path.conf" \
        > "$PKGDIR/usr/share/gpudriverpath/gsgpu_path.conf"

    patch_elf_rpath "libpulse.so.0" "$LOLPREFIX/lib/$OWTARGET/pulseaudio"
    patch_elf_rpath "gio/modules/libgioremote-volume-monitor.so" "$LOLPREFIX/lib/$OWTARGET/gvfs"
    patch_elf_rpath "gio/modules/libgvfsdbus.so" "$LOLPREFIX/lib/$OWTARGET/gvfs"

    abinfo "Removing unnecessary glib2 files ..."
    rm -vf "$PKGDIR$LOLPREFIX/lib/$OWTARGET/glib-2.0/gio-launch-desktop"
    rm -vf "$PKGDIR$LOLPREFIX/lib/$OWTARGET/glib-2.0/glib-compile-schemas"

    "$BLDDIR/build/glibc-build/elf/ldconfig" \
        -v \
        -r "$PKGDIR" \
        -C "$LOLPREFIX/etc/ld.so.cache" \
        -X \
        -f "$LOLPREFIX/etc/ld.so.conf"

    [ -f "$PKGDIR$LOLPREFIX/etc/ld.so.cache" ]
}

make_build() {
    abinfo "Unpacking GNU Make 4.3 ..."
    mkdir -pv "$BLDDIR/src/make"
    tar \
        -C "$BLDDIR/src/make" \
        -xvz \
        --strip-components=1 \
        -f "$SRCDIR/make.tar.gz"

    abinfo "Replacing config.* ..."
    cp -v /usr/bin/{config.guess,config.sub} \
        "$BLDDIR/src/make/build-aux/"

    abinfo "Building GNU Make 4.3 ..."
    mkdir -pv "$BLDDIR/build/make"

    pushd "$BLDDIR/build/make"
    "$BLDDIR/src/make/configure" \
        --disable-werror \
        --prefix="/usr" \
        --host="$ABHOST" \
        --build="$ABBUILD"
    make
    make install \
        DESTDIR="$BLDDIR/make-bin"
    popd

    [ -x "$BLDDIR/make-bin/usr/bin/make" ]
}

build_glibc_build() {

    abinfo "Unpacking Glibc 2.37 (build toolchain) ..."
    mkdir -pv "$BLDDIR/src/glibc-build"
    tar \
        -C "$BLDDIR/src/glibc-build" \
        -xvz \
        --strip-components=1 \
        -f "$SRCDIR/glibc-build.tar.gz"

    abinfo "Building Glibc 2.37 (build toolchain) ..."
    mkdir -pv "$BLDDIR/build/glibc-build"

    pushd "$BLDDIR/build/glibc-build"
    CPPFLAGS="$CPPFLAGS -U_FORTIFY_SOURCE" \
    "$BLDDIR/src/glibc-build/configure" \
        --disable-werror \
        --prefix="$LOLPREFIX" \
        --enable-obsolete-rpc
    make "$PWD/libc.a"
    make "$PWD/elf/ldconfig" \
        subdir=elf \
        -C "$BLDDIR/src/glibc-build/elf" \
        ..=../ \
        objdir="$PWD"
    popd

    [ -x "$BLDDIR/build/glibc-build/elf/ldconfig" ]
}

install_dbgsyms() {
    local bldid
    local symfile
    bool $ABSTRIP || return 0
    bool $ABSPLITDBG || return 0

    for i in "$PKGDIR$LOLPREFIX/"**; do
        if ! elf_iself "$i"; then
            continue
        fi
        if bldid=$(elf_buildid_sha1 "$i"); then
            if ! elf_has_debug "$i"; then
                abinfo "$i does not contain debug symbols but has build-id record $bldid, attempting to locate debug symbol file ..."
                symfile="$BLDDIR/unpack/add_libs/usr/lib/debug/.build-id/${bldid:0:2}/${bldid:2}.debug"

                if [ ! -e "$symfile" ]; then
                    abwarn "$i: missing debug symbol $symfile"
                    continue
                fi

                abinfo "$i: Saving debug symbols from $symfile ..."
                elf_install_symfile "$symfile" "$bldid" "${SYMDIR}"
            fi
        fi
    done
}

install_copyright_docs() {
    abinfo "Installing copyright documentation ..."
    mkdir -pv "$PKGDIR/usr/share/doc/$PKGNAME"

    install -Dvm644 "$BLDDIR/unpack/linux-libc/usr/share/doc/linux-libc-dev/copyright" \
        -t "$PKGDIR/usr/share/doc/$PKGNAME/linux-libc-dev"
    pushd "$BLDDIR/unpack/add_libs/usr/share/doc"
    local dir
    local dest
    for dir in *; do
        case $dir in
            *-dbg | *-dbgsym)
                dest="$SYMDIR/usr/share/doc/$PKGNAME"
                ;;
            *)
                dest="$PKGDIR/usr/share/doc/$PKGNAME"
                ;;
        esac
        if [ -L "$dir" ]; then
            abinfo "$dir is a symlink"
            mkdir -pv "$dest/"
            cp -av "$dir" "$dest/"
        elif [ -d "$dir" ]; then
            if [ -f "$dir/copyright" ]; then
                abinfo "Installing $dir/copyright ..."
                install -Dvm644 "$dir/copyright" \
                    -t "$dest/$dir"
            fi
        fi
    done
    popd
}

set_host_build_env() {
    abinfo "Setting up environment for building host libs ..."
    mkdir -pv "$BLDDIR/build-root"
    mkdir -pv "$BLDDIR/build-root/usr/lib"
    mkdir -pv "$BLDDIR/build-root/usr/lib64"
    ln -sfv "usr/lib" "$BLDDIR/build-root/lib"
    ln -sfv "usr/lib64" "$BLDDIR/build-root/lib64"

    for i in "$SRCDIR/dist_dev_"*.deb "$SRCDIR/dev_"*.deb; do
        abinfo "Extracting $i ..."
        dpkg-deb \
            --fsys-tarfile "$i" |\
            tar -C "$BLDDIR/build-root" -x --keep-directory-symlink
    done

    local t;

    abinfo "Fixing symlinks ..."
    for i in "$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu/"*; do
        if [ -L "$i" ]; then
            t=$(readlink "$i" | sed --silent '/^\//{s@/lib/loongarch64-linux-gnu/@@; p}')
            if [ -n "$t" ]; then
                ln -svf "$t" "$i"
            fi
        fi
    done

    abinfo "Checking for absolute symlinks ..."

    local have_abs_symlink=0
    for i in "$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu/"*; do
        if [ -L "$i" ]; then
            t=$(readlink "$i")
            if [ "${t:0:1}" = "/" ]; then
                abworn "$i is an absolute symlink"
                have_abs_symlink=1
            fi
        fi
    done
    if [ "$have_abs_symlink" -ne 0 ]; then
        abdie "Absolute symlinks detected, aborting"
    fi

    abinfo "Symlinking gobject-introspection-1.0 ..."

    ln -sfv /usr/share/gobject-introspection-1.0 \
        -t "$BLDDIR/build-root/usr/share/"

    HOST_BUILD_ENVS=(
        "PATH=$PATH:$BLDDIR/toolchainroot/$LOLPREFIX/bin"
        "CFLAGS=\
            -pipe -O2 -g \
            -I$BLDDIR/build-root/usr/include/loongarch64-linux-gnu \
            -I$BLDDIR/build-root/usr/include \
            -L$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu \
            -Wl,--rpath-link -Wl,$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu \
            --sysroot=$BLDDIR/build-root \
            -ffile-prefix-map=$BLDDIR=. \
        "
        "PKG_CONFIG_PATH=$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig"
        "PKG_CONFIG_SYSROOT_DIR=$BLDDIR/build-root"
        "LDFLAGS=\
            -Wl,-O1,--sort-common,--as-needed -Wl,-build-id=sha1 \
            -L$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu \
            -Wl,--rpath-link -Wl,$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu \
            --sysroot=$BLDDIR/build-root \
            -ffile-prefix-map=$BLDDIR=. \
        "
        "ASFLAGS=\
            -pipe -O2 -g \
            -ffile-prefix-map=$BLDDIR=. \
        "
        "PKG_CONFIG=pkg-config"
    )
}

install_host_shlib() {
    local libname="$1"
    abinfo "Installing host lib "$libname" ..."
    [ -e "$libname" ] || abdie "no product built"

    local lib="$(readlink -f "$libname")"
    install -Dvm644 "$lib" \
        -t "$PKGDIR$LOLPREFIX/lib/$OWTARGET/"
    ln -svf "$(basename -- "$lib")" \
        "$PKGDIR$LOLPREFIX/lib/$OWTARGET/$(basename -- "$libname")"
}

install_host_cache_default() {
    local cachefile="$1"
    local cachepackage="$2"

    abinfo "Installing host module cache file for $cachepackage ..."
    mkdir -p "$PKGDIR/usr/share/liblol"
    sed 's#@libdir@#'"$LOLPREFIX/lib/$OWTARGET"'#g' \
        "$SRCDIR/autobuild/additional-files/$cachefile.in" \
        > "$PKGDIR/usr/share/liblol/$cachefile.default"
}

host_gdk_pixbuf() {
    mkdir -p "$BLDDIR/build/host-gdk-pixbuf"

    abinfo "Unpacking gdk-pixbuf ..."
    dpkg-source -x "$SRCDIR/gdk-pixbuf_"*.dsc "$BLDDIR/src/gdk-pixbuf"

    pushd "$BLDDIR/build/host-gdk-pixbuf"
    cat > cross-file.txt << EOF
[binaries]
c = '${OWTARGET}-gcc'
cpp = '${OWTARGET}g++'
ar = '${OWTARGET}-ar'
strip = '${OWTARGET}-strip'

[host_machine]
system = 'linux'
cpu_family = 'loongarch64'
cpu = 'loongarch64'
endian = 'little'
EOF

    abinfo "Configuring host gdk-pixbuf ..."
    env -i "${HOST_BUILD_ENVS[@]}" \
        meson setup "$BLDDIR/src/gdk-pixbuf" \
            --wrap-mode=nodownload \
            --buildtype=plain \
            --prefix="$LOLPREFIX" \
            --sysconfdir=/etc \
            --localstatedir=/var \
            --libdir="lib/$OWTARGET" \
            --cross-file cross-file.txt \
            -Dpython.bytecompile=-1 \
            -Dman=false \
            -Dauto_features=enabled \
            -Dinstalled_tests=false \
            -Dgir=false

    abinfo "Building host gdk-pixbuf ..."
    env -i "${HOST_BUILD_ENVS[@]}" \
        meson compile -v \
            gdk-pixbuf/gdk_pixbuf-2.0:shared_library \
            gdk-pixbuf/gdk-pixbuf-query-loaders:executable

    abinfo "Installing host gdk-pixbuf ..."
    install_host_shlib "gdk-pixbuf/libgdk_pixbuf-2.0.so.0"

    install -Dvm755 "gdk-pixbuf/gdk-pixbuf-query-loaders" \
        -t "$PKGDIR$LOLPREFIX/lib/$OWTARGET/gdk-pixbuf-2.0/"

    install_host_cache_default "gdk-pixbuf-query-loaders.cache" "gdk-pixbuf"

    popd
}

host_gtk2() {
    mkdir -p "$BLDDIR/build/host-gtk2"

    abinfo "Unpacking gtk2 ..."
    dpkg-source -x "$SRCDIR/gtk+2.0_"*.dsc "$BLDDIR/src/gtk2"

    abinfo "Regenerating Autotools scripts ..."
    autoreconf -fvs "$BLDDIR/src/gtk2"
    cp -v /usr/bin/{config.guess,config.sub} \
        "$BLDDIR/src/gtk2/"

    apply_source_patch_series \
        "$SRCDIR/autobuild/patches/gtk2" \
        "$BLDDIR/src/gtk2" \
        "gtk2"

    pushd "$BLDDIR/build/host-gtk2"

    abinfo "Configuring host gtk2 ..."
    env -i "${HOST_BUILD_ENVS[@]}" \
        "$BLDDIR/src/gtk2/configure" \
            --host="$OWTARGET" \
            --prefix="$LOLPREFIX" \
            --libdir="$LOLPREFIX/lib/$OWTARGET" \
            --sysconfdir=/etc \
            --enable-test-print-backend \
            --with-xinput=yes \
            --enable-shared \
            --enable-introspection \
            --disable-static \
            --disable-man

    abinfo "Building host gtk2 ..."

    # Fill in a dummy libgdk-x11-2.0.la to make the build happy
    #   since we do not need to rebuild libgdk-3
    cat > gdk/libgdk-x11-2.0.la << EOF
# Generated by libtool
old_library=''
dlname='libgdk-x11-2.0.so.0'
library_names='libgdk-x11-2.0.so.0'
libdir='$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu'
EOF

    env -i "${HOST_BUILD_ENVS[@]}" "MAKEFLAGS=$MAKEFLAGS" \
        make -C gtk libgtk-x11-2.0.la

    abinfo "Installing host gtk2 ..."
    install_host_shlib "gtk/.libs/libgtk-x11-2.0.so.0"
    install_host_cache_default "gtk2-immodules.cache" "gtk2 immodules"

    popd
}

host_gtk3() {
    mkdir -p "$BLDDIR/build/host-gtk3"

    abinfo "Unpacking gtk3 ..."
    dpkg-source -x "$SRCDIR/gtk+3.0_"*.dsc "$BLDDIR/src/gtk3"

    abinfo "Regenerating Autotools scripts ..."
    autoreconf -fvs "$BLDDIR/src/gtk3"
    cp -v /usr/bin/{config.guess,config.sub} \
        "$BLDDIR/src/gtk3/build-aux/"

    pushd "$BLDDIR/build/host-gtk3"

    abinfo "Configuring host gtk3 ..."
    env -i "${HOST_BUILD_ENVS[@]}" \
        "$BLDDIR/src/gtk3/configure" \
            --host="$OWTARGET" \
            --prefix="$LOLPREFIX" \
            --libdir="$LOLPREFIX/lib/$OWTARGET" \
            --libexecdir="$LOLPREFIX/libexec" \
            --sysconfdir=/etc \
            --enable-test-print-backend \
            --enable-broadway-backend \
            --enable-x11-backend \
            --enable-wayland-backend \
            --enable-shared \
            --enable-introspection \
            --enable-cloudprint \
            --disable-static \
            --disable-man \
            CUPS_CONFIG="$BLDDIR/build-root/usr/bin/cups-config"

    abinfo "Building host gtk3 ..."
    # Fill in a dummy libgdk-3.la to make the build happy
    #   since we do not need to rebuild libgdk-3
    cat > gdk/libgdk-3.la << EOF
# Generated by libtool
old_library=''
dlname='libgdk-3.so.0'
library_names='libgdk-3.so.0'
libdir='$BLDDIR/build-root/usr/lib/loongarch64-linux-gnu'
EOF
    env -i "${HOST_BUILD_ENVS[@]}" "MAKEFLAGS=$MAKEFLAGS" \
        bash -c '
            set -e -o pipefail
            make -C gtk gtkdbusgenerated.h V=1
            make -C gtk libgtk-3.la V=1
        '

    abinfo "Installing host gtk3 ..."
    install_host_shlib "gtk/.libs/libgtk-3.so.0"
    install_host_cache_default "gtk3-immodules.cache" "gtk3 immodules"

    popd
}

host_glib2() {
    mkdir -p "$BLDDIR/build/host-glib2"

    abinfo "Unpacking glib2 ..."
    dpkg-source -x "$SRCDIR/glib2.0"*.dsc "$BLDDIR/src/glib2"

    apply_source_patch_series \
        "$SRCDIR/autobuild/patches/glib2" \
        "$BLDDIR/src/glib2" \
        "glib2"

    pushd "$BLDDIR/build/host-glib2"
    cat > cross-file.txt << EOF
[binaries]
c = '${OWTARGET}-gcc'
cpp = '${OWTARGET}g++'
ar = '${OWTARGET}-ar'
strip = '${OWTARGET}-strip'

[host_machine]
system = 'linux'
cpu_family = 'loongarch64'
cpu = 'loongarch64'
endian = 'little'
EOF

    abinfo "Configuring host glib2 ..."
    env -i "${HOST_BUILD_ENVS[@]}" \
        meson setup "$BLDDIR/src/glib2" \
            --wrap-mode=nodownload \
            --buildtype=plain \
            --prefix="$LOLPREFIX" \
            --sysconfdir=/etc \
            --localstatedir=/var \
            --libdir="lib/$OWTARGET" \
            --libexecdir=lib/glib2.0 \
            -Dinternal_pcre=false \
            --default-library shared \
            -Dgtk_doc=false \
            -Dinstalled_tests=false \
            -Dman=false \
            -Dfam=false \
            -Dlibmount=true \
            -Dselinux=true \
            -Dsystemtap=true \
            -Dxattr=true \
            --cross-file cross-file.txt

    abinfo "Building host glib2 ..."
    env -i "${HOST_BUILD_ENVS[@]}" \
        meson compile -v \
            gio/gio-2.0:shared_library

    abinfo "Installing host glib2 ..."
    install_host_shlib "gio/libgio-2.0.so.0"

    install_host_cache_default "giomodule.cache" "glib2"

    popd
}

install_hooks() {
    for i in postinst postrm; do
        sed 's#@prefix@#'"$LOLPREFIX"'#g; s#@target@#'"$OWTARGET"'#g' \
            "$SRCDIR/autobuild/additional-files/hooks/$i.in" \
            > "$SRCDIR/autobuild/$i"
        chmod +x "$SRCDIR/autobuild/$i"
    done
}

abinfo "Building Binutils ..."
binutils_source
binutils_build

abinfo "Building build Glibc ..."
build_glibc_build

abinfo "Building GCC ..."
gcc_source
gcc_build

abinfo "Install Linux API headers ..."
linux_libc_install

abinfo "Install GCC runtime ..."
libgcc_install

abinfo "Building GNU Make 4.3 ..."
make_build

abinfo "Building Glibc ..."
glibc_source
glibc_build

set_host_build_env

abinfo "Building host gdk-pixbuf"
host_gdk_pixbuf

abinfo "Building host gtk2"
host_gtk2

abinfo "Building host gtk3"
host_gtk3

abinfo "Building host glib2"
host_glib2

abinfo "Install additional runtime libraries ..."
install_additional_libs

abinfo "Installing debug symbols ..."
install_dbgsyms

abinfo "Installing documentation ..."
install_copyright_docs

abinfo "Installing package hooks ..."
install_hooks
