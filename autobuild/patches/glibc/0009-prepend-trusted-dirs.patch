From 094b4125ae653c22b3d3bd0720038eeca33d31cb Mon Sep 17 00:00:00 2001
From: Miao Wang <shankerwangmiao@gmail.com>
Date: Sun, 14 Jan 2024 13:28:41 +0800
Subject: [PATCH 09/11] prepend trusted-dirs

and search prepended trusted-dirs before other pathes
---
 elf/Makefile  |  3 ++-
 elf/dl-load.c | 26 ++++++++++++++++++++++++--
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/elf/Makefile b/elf/Makefile
index a3475f3f..f945a68f 100644
--- a/elf/Makefile
+++ b/elf/Makefile
@@ -1407,9 +1407,10 @@ endif
 $(objpfx)trusted-dirs.h: $(objpfx)trusted-dirs.st; @:
 $(objpfx)trusted-dirs.st: Makefile $(..)Makeconfig
 	$(make-target-directory)
-	echo "$(subst :, ,$(default-rpath) $(user-defined-trusted-dirs))"    \
+	echo "$(subst :, ,$(user-defined-trusted-dirs-pre) $(default-rpath) $(user-defined-trusted-dirs))"    \
 	| $(AWK) -f gen-trusted-dirs.awk > ${@:st=T};
 	echo '#define DL_DST_LIB "$(notdir $(slibdir))"' >> ${@:st=T}
+	echo '#define SYSTEM_DIRS_PRE_COUNT $(words $(subst :, ,$(user-defined-trusted-dirs-pre)))' >> ${@:st=T}
 	$(move-if-change) ${@:st=T} ${@:st=h}
 	touch $@
 CPPFLAGS-dl-load.c += -I$(objpfx). -I$(csu-objpfx).
diff --git a/elf/dl-load.c b/elf/dl-load.c
index 8a89b710..dd02ad2d 100644
--- a/elf/dl-load.c
+++ b/elf/dl-load.c
@@ -112,6 +112,9 @@ static const size_t system_dirs_len[] =
   SYSTEM_DIRS_LEN
 };
 #define nsystem_dirs_len array_length (system_dirs_len)
+#define normal_system_dirs_len (nsystem_dirs_len - SYSTEM_DIRS_PRE_COUNT)
+
+static_assert (SYSTEM_DIRS_PRE_COUNT < nsystem_dirs_len, "should have at least one system dir");
 
 static bool
 is_trusted_path_normalize (const char *path, size_t len)
@@ -712,7 +715,7 @@ _dl_init_paths (const char *llp, const char *source,
 
   /* First set up the rest of the default search directory entries.  */
   aelem = __rtld_search_dirs.dirs = (struct r_search_path_elem **)
-    malloc ((nsystem_dirs_len + 1) * sizeof (struct r_search_path_elem *));
+    malloc ((nsystem_dirs_len + 2) * sizeof (struct r_search_path_elem *));
   if (__rtld_search_dirs.dirs == NULL)
     {
       errstring = N_("cannot create search path array");
@@ -737,11 +740,17 @@ _dl_init_paths (const char *llp, const char *source,
   pelem = GL(dl_all_dirs) = __rtld_search_dirs.dirs[0];
   strp = system_dirs;
   idx = 0;
+  aelem = &__rtld_search_dirs.dirs[normal_system_dirs_len + 1];
 
   do
     {
       size_t cnt;
 
+      if (aelem == &__rtld_search_dirs.dirs[nsystem_dirs_len + 1]){
+        *aelem = NULL;
+        aelem = &__rtld_search_dirs.dirs[0];
+      }
+
       *aelem++ = pelem;
 
       pelem->what = "system search path";
@@ -1980,9 +1989,22 @@ _dl_map_object (struct link_map *loader, const char *name,
 
       fd = -1;
 
+      if (SYSTEM_DIRS_PRE_COUNT > 0
+          && ((l = loader ?: GL(dl_ns)[nsid]._ns_loaded) == NULL
+          || __glibc_likely (!(l->l_flags_1 & DF_1_NODEFLIB)))
+          && __rtld_search_dirs.dirs != (void *) -1)
+        {
+          struct r_search_path_struct pre_sp = {
+            .dirs = &__rtld_search_dirs.dirs[normal_system_dirs_len + 1],
+            .malloced = 0,
+          };
+          fd = open_path (name, namelen, mode, &pre_sp,
+              &realname, &fb, l, LA_SER_DEFAULT, &found_other_class);
+        }
+
       /* When the object has the RUNPATH information we don't use any
 	 RPATHs.  */
-      if (loader == NULL || loader->l_info[DT_RUNPATH] == NULL)
+      if (fd == -1 && (loader == NULL || loader->l_info[DT_RUNPATH] == NULL))
 	{
 	  /* This is the executable's map (if there is one).  Make sure that
 	     we do not look at it twice.  */
-- 
2.43.0

