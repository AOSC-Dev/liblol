From 6cdd1507ce24af347189225ccb4badae1da08add Mon Sep 17 00:00:00 2001
From: Miao Wang <shankerwangmiao@gmail.com>
Date: Sun, 14 Jan 2024 05:15:07 +0800
Subject: [PATCH 04/10] add sigaction & ucontext compat

---
 sysdeps/unix/sysv/linux/loongarch/Makefile    |   8 +-
 .../unix/sysv/linux/loongarch/getcontext.S    |   3 +-
 .../unix/sysv/linux/loongarch/makecontext.c   |   3 +-
 .../unix/sysv/linux/loongarch/ow_getcontext.S |  13 +
 .../sysv/linux/loongarch/ow_makecontext.c     |  17 +
 .../unix/sysv/linux/loongarch/ow_setcontext.S |  14 +
 .../sysv/linux/loongarch/ow_swapcontext.S     |  13 +
 .../sysv/linux/loongarch/ow_ucontext-macros.h |  35 ++
 .../unix/sysv/linux/loongarch/ow_ucontext.h   | 105 +++++
 .../sysv/linux/loongarch/ow_ucontext_i.sym    |  32 ++
 .../unix/sysv/linux/loongarch/setcontext.S    |   4 +-
 sysdeps/unix/sysv/linux/loongarch/sigaction.c | 384 ++++++++++++++++++
 .../unix/sysv/linux/loongarch/swapcontext.S   |   3 +-
 13 files changed, 629 insertions(+), 5 deletions(-)
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/ow_getcontext.S
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/ow_makecontext.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/ow_setcontext.S
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/ow_swapcontext.S
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/ow_ucontext-macros.h
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/ow_ucontext.h
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/ow_ucontext_i.sym
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/sigaction.c

diff --git a/sysdeps/unix/sysv/linux/loongarch/Makefile b/sysdeps/unix/sysv/linux/loongarch/Makefile
index 70cac2d3..1d447ea4 100644
--- a/sysdeps/unix/sysv/linux/loongarch/Makefile
+++ b/sysdeps/unix/sysv/linux/loongarch/Makefile
@@ -1,5 +1,11 @@
 ifeq ($(subdir),stdlib)
-gen-as-const-headers += ucontext_i.sym
+gen-as-const-headers += ucontext_i.sym ow_ucontext_i.sym
+sysdep_routines += \
+  ow_swapcontext \
+  ow_makecontext \
+  ow_getcontext \
+  ow_setcontext \
+  # sysdep_routines
 endif
 
 ifeq ($(subdir),signal)
diff --git a/sysdeps/unix/sysv/linux/loongarch/getcontext.S b/sysdeps/unix/sysv/linux/loongarch/getcontext.S
index d04e33c0..88f4aa92 100644
--- a/sysdeps/unix/sysv/linux/loongarch/getcontext.S
+++ b/sysdeps/unix/sysv/linux/loongarch/getcontext.S
@@ -16,6 +16,7 @@
    License along with the GNU C Library.  If not, see
    <https://www.gnu.org/licenses/>.  */
 
+#include <shlib-compat.h>
 #include "ucontext-macros.h"
 
 /* int getcontext (ucontext_t *ucp) */
@@ -56,4 +57,4 @@ LEAF (__getcontext)
 
 PSEUDO_END (__getcontext)
 
-weak_alias (__getcontext, getcontext)
+versioned_symbol (libc, __getcontext, getcontext, GLIBC_2_36);
diff --git a/sysdeps/unix/sysv/linux/loongarch/makecontext.c b/sysdeps/unix/sysv/linux/loongarch/makecontext.c
index a17f6ccc..b17fdc5d 100644
--- a/sysdeps/unix/sysv/linux/loongarch/makecontext.c
+++ b/sysdeps/unix/sysv/linux/loongarch/makecontext.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library.  If not, see
    <https://www.gnu.org/licenses/>.  */
 
+#include <shlib-compat.h>
 #include <sysdep.h>
 #include <sys/asm.h>
 #include <sys/ucontext.h>
@@ -78,4 +79,4 @@ __makecontext (ucontext_t *ucp, void (*func) (void), int argc, long int a0,
     }
 }
 
-weak_alias (__makecontext, makecontext)
+versioned_symbol (libc, __makecontext, makecontext, GLIBC_2_36);
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_getcontext.S b/sysdeps/unix/sysv/linux/loongarch/ow_getcontext.S
new file mode 100644
index 00000000..24ae4244
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_getcontext.S
@@ -0,0 +1,13 @@
+#include <shlib-compat.h>
+#include "ow_ucontext-macros.h"
+
+#if SHLIB_COMPAT (libc, GLIBC_2_1, GLIBC_2_36)
+#undef versioned_symbol
+#define versioned_symbol(a, b, c, d)
+#define __getcontext __ow___getcontext
+#include "getcontext.S"
+
+#undef __getcontext
+compat_symbol (libc, __ow___getcontext, getcontext, GLIBC_2_1);
+
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_makecontext.c b/sysdeps/unix/sysv/linux/loongarch/ow_makecontext.c
new file mode 100644
index 00000000..d2effdc9
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_makecontext.c
@@ -0,0 +1,17 @@
+#include <shlib-compat.h>
+
+#if SHLIB_COMPAT (libc, GLIBC_2_1, GLIBC_2_36)
+#include <sys/ucontext.h>
+#include "ow_ucontext.h"
+
+#undef versioned_symbol
+#define versioned_symbol(a, b, c, d)
+#define ucontext_t __ow_ucontext_t
+#define __makecontext __ow___makecontext
+#define __start_context __ow___start_context
+#include "makecontext.c"
+
+#undef __makecontext
+compat_symbol (libc, __ow___makecontext, makecontext, GLIBC_2_1);
+
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_setcontext.S b/sysdeps/unix/sysv/linux/loongarch/ow_setcontext.S
new file mode 100644
index 00000000..906e28fb
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_setcontext.S
@@ -0,0 +1,14 @@
+#include <shlib-compat.h>
+#include "ow_ucontext-macros.h"
+
+#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_36)
+#undef versioned_symbol
+#define versioned_symbol(a, b, c, d)
+#define __setcontext __ow___setcontext
+#define __start_context __ow___start_context
+#include "setcontext.S"
+
+#undef __setcontext
+compat_symbol (libc, __ow___setcontext, setcontext, GLIBC_2_0);
+
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_swapcontext.S b/sysdeps/unix/sysv/linux/loongarch/ow_swapcontext.S
new file mode 100644
index 00000000..c0a0b6a4
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_swapcontext.S
@@ -0,0 +1,13 @@
+#include <shlib-compat.h>
+#include "ow_ucontext-macros.h"
+
+#if SHLIB_COMPAT (libc, GLIBC_2_1, GLIBC_2_36)
+#undef versioned_symbol
+#define versioned_symbol(a, b, c, d)
+#define __swapcontext __ow___swapcontext
+#include "swapcontext.S"
+
+#undef __swapcontext
+compat_symbol (libc, __ow___swapcontext, swapcontext, GLIBC_2_1);
+
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_ucontext-macros.h b/sysdeps/unix/sysv/linux/loongarch/ow_ucontext-macros.h
new file mode 100644
index 00000000..984c9069
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_ucontext-macros.h
@@ -0,0 +1,35 @@
+/* Macros for ucontext routines.
+   Copyright (C) 2022-2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library.  If not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#ifndef _LINUX_LOONGARCH_OW_UCONTEXT_MACROS_H
+#define _LINUX_LOONGARCH_OW_UCONTEXT_MACROS_H
+
+// We also define this to prevent new world headers from being included.
+#define _LINUX_LOONGARCH_UCONTEXT_MACROS_H
+
+#include <sysdep.h>
+#include <sys/asm.h>
+#include "ow_ucontext_i.h"
+
+#define SAVE_INT_REG(name, num, base) \
+  REG_S name, base, ((num) *SZREG + MCONTEXT_GREGS)
+
+#define RESTORE_INT_REG(name, num, base) \
+  REG_L name, base, ((num) *SZREG + MCONTEXT_GREGS)
+
+#endif /* _LINUX_LOONGARCH_OW_UCONTEXT_MACROS_H */
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_ucontext.h b/sysdeps/unix/sysv/linux/loongarch/ow_ucontext.h
new file mode 100644
index 00000000..33cd554f
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_ucontext.h
@@ -0,0 +1,105 @@
+#ifndef _OW_UCONTEXT_H
+#define _OW_UCONTEXT_H 1
+#include <sys/ucontext.h>
+#include <signal.h>
+#include <assert.h>
+#include <string.h>
+#include "ow_sigop.h"
+
+union __ow_loongarch_mc_fp_state {
+    unsigned int   __val32[256 / 32];
+    unsigned long long   __val64[256 / 64];
+};
+
+typedef struct __ow_mcontext_t {
+    unsigned long long   __pc;
+    unsigned long long   __gregs[32];
+    unsigned int   __flags;
+
+    unsigned int   __fcsr;
+    unsigned int   __vcsr;
+    unsigned long long   __fcc;
+    union __ow_loongarch_mc_fp_state    __fpregs[32] __attribute__((__aligned__ (32)));
+
+    unsigned int   __reserved;
+} __ow_mcontext_t;
+
+/* Userlevel context.  */
+typedef struct __ow_ucontext_t
+  {
+    unsigned long int  __uc_flags;
+    struct __ow_ucontext_t *uc_link;
+    stack_t            uc_stack;
+    __ow_mcontext_t    uc_mcontext;
+    sigset_t           uc_sigmask;
+  } __ow_ucontext_t;
+
+struct __nw_sctx_info
+  {
+    unsigned int magic;
+    unsigned int size;
+    unsigned long long padding; /* padding to 16 bytes */
+  };
+
+/* FPU context */
+#define FPU_CTX_MAGIC 0x46505501
+#define FPU_CTX_ALIGN 8
+struct __nw_fpu_context
+  {
+    unsigned long long regs[32];
+    unsigned long long fcc;
+    unsigned int fcsr;
+  };
+/* LSX context */
+#define LSX_CTX_MAGIC 0x53580001
+#define LSX_CTX_ALIGN 16
+struct __nw_lsx_context
+  {
+    unsigned long long regs[32][2];
+    unsigned long long fcc;
+    unsigned long long fcsr;
+  };
+/* LASX context */
+#define LASX_CTX_MAGIC 0x41535801
+#define LASX_CTX_ALIGN 32
+struct __nw_lasx_context
+  {
+    unsigned long long regs[32][4];
+    unsigned long long fcc;
+    unsigned long long fcsr;
+  };
+
+static inline void __copy_nw_ow (__ow_ucontext_t *ow_ctx, const ucontext_t *nw_ctx){
+  ow_ctx->__uc_flags = nw_ctx->__uc_flags;
+  ow_ctx->uc_link = NULL;
+  ow_ctx->uc_stack = nw_ctx->uc_stack;
+  ow_ctx->uc_sigmask = nw_ctx->uc_sigmask;
+  __ow_clear_unused_bits (&ow_ctx->uc_sigmask);
+
+  ow_ctx->uc_mcontext.__pc = nw_ctx->uc_mcontext.__pc;
+  static_assert (sizeof (ow_ctx->uc_mcontext.__gregs) ==
+                 sizeof (nw_ctx->uc_mcontext.__gregs),
+                 "gregs size mismatch");
+  memcpy (&ow_ctx->uc_mcontext.__gregs, &nw_ctx->uc_mcontext.__gregs,
+          sizeof (ow_ctx->uc_mcontext.__gregs));
+  ow_ctx->uc_mcontext.__flags = nw_ctx->uc_mcontext.__flags;
+  ow_ctx->uc_mcontext.__fcsr = 0;
+  ow_ctx->uc_mcontext.__vcsr = 0;
+  ow_ctx->uc_mcontext.__fcc = 0;
+  memset (&ow_ctx->uc_mcontext.__fpregs, 0,
+          sizeof (ow_ctx->uc_mcontext.__fpregs));
+  ow_ctx->uc_mcontext.__reserved = 0;
+}
+
+static inline void __copy_ow_nw (ucontext_t *nw_ctx, const __ow_ucontext_t *ow_ctx){
+  nw_ctx->uc_mcontext.__flags = ow_ctx->uc_mcontext.__flags;
+  memcpy (&nw_ctx->uc_mcontext.__gregs, &ow_ctx->uc_mcontext.__gregs,
+          sizeof (nw_ctx->uc_mcontext.__gregs));
+  nw_ctx->uc_mcontext.__pc = ow_ctx->uc_mcontext.__pc;
+  nw_ctx->uc_sigmask = ow_ctx->uc_sigmask;
+  __ow_clear_unused_bits (&nw_ctx->uc_sigmask);
+  nw_ctx->uc_stack = ow_ctx->uc_stack;
+  nw_ctx->__uc_flags = ow_ctx->__uc_flags;
+}
+
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_ucontext_i.sym b/sysdeps/unix/sysv/linux/loongarch/ow_ucontext_i.sym
new file mode 100644
index 00000000..5af4dd4d
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_ucontext_i.sym
@@ -0,0 +1,32 @@
+#include <inttypes.h>
+#include <signal.h>
+#include <stddef.h>
+#include <sys/ucontext.h>
+#include "ow_ucontext.h"
+
+-- Constants used by the rt_sigprocmask call.
+
+SIG_BLOCK
+SIG_SETMASK
+
+_NSIG8				(_NSIG / 8)
+
+-- Offsets of the fields in the ucontext_t structure.
+#define ucontext(member)	offsetof (__ow_ucontext_t, member)
+#define stack(member)		ucontext (uc_stack.member)
+#define mcontext(member)	ucontext (uc_mcontext.member)
+
+UCONTEXT_FLAGS			ucontext (__uc_flags)
+UCONTEXT_LINK			ucontext (uc_link)
+UCONTEXT_STACK			ucontext (uc_stack)
+UCONTEXT_MCONTEXT		ucontext (uc_mcontext)
+UCONTEXT_SIGMASK		ucontext (uc_sigmask)
+
+STACK_SP			stack (ss_sp)
+STACK_SIZE			stack (ss_size)
+STACK_FLAGS			stack (ss_flags)
+
+MCONTEXT_PC			mcontext (__pc)
+MCONTEXT_GREGS			mcontext (__gregs)
+
+UCONTEXT_SIZE			sizeof (__ow_ucontext_t)
diff --git a/sysdeps/unix/sysv/linux/loongarch/setcontext.S b/sysdeps/unix/sysv/linux/loongarch/setcontext.S
index d01409af..5ca9467b 100644
--- a/sysdeps/unix/sysv/linux/loongarch/setcontext.S
+++ b/sysdeps/unix/sysv/linux/loongarch/setcontext.S
@@ -15,6 +15,8 @@
    You should have received a copy of the GNU Lesser General Public
    License along with the GNU C Library.  If not, see
    <https://www.gnu.org/licenses/>.  */
+
+#include <shlib-compat.h>
 #include "sys/regdef.h"
 #include "ucontext-macros.h"
 
@@ -80,7 +82,7 @@ LEAF (__setcontext)
 	b		__syscall_error
 
 PSEUDO_END (__setcontext)
-weak_alias (__setcontext, setcontext)
+versioned_symbol (libc, __setcontext, setcontext, GLIBC_2_36);
 
 LEAF (__start_context)
 
diff --git a/sysdeps/unix/sysv/linux/loongarch/sigaction.c b/sysdeps/unix/sysv/linux/loongarch/sigaction.c
new file mode 100644
index 00000000..6e370c33
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/sigaction.c
@@ -0,0 +1,384 @@
+#include <shlib-compat.h>
+#include <signal.h>
+#include <internal-signals.h>
+
+#undef weak_alias
+#define weak_alias(name, aliasname)
+#undef libc_hidden_def
+#define libc_hidden_def(name)
+#define __sigaction __nw_sigaction
+
+#include <signal/sigaction.c>
+
+#undef __sigaction
+
+versioned_symbol (libc, __nw_sigaction, sigaction, GLIBC_2_36);
+versioned_symbol (libc, __nw_sigaction, __sigaction, GLIBC_2_36);
+libc_hidden_ver (__nw_sigaction, __sigaction);
+
+#if IS_IN(libc) && (SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_36) || OTHER_SHLIB_COMPAT(libpthread, GLIBC_2_0, GLIBC_2_34))
+#include <sys/mman.h>
+#include <assert.h>
+#if !IS_IN(rtld)
+#include <libc-lock.h>
+#endif
+#include "ow_ucontext.h"
+
+typedef void (*__linx_sighandler_t) (int, siginfo_t *, void *);
+
+static void
+custom_handler (int sig, siginfo_t *info, void *ucontext,
+                __linx_sighandler_t real_handler)
+{
+    struct __ow_ucontext_t ow_ctx;
+
+    struct ucontext_t *nw_ctx = ucontext;
+
+    __copy_nw_ow(&ow_ctx, nw_ctx);
+    int have_fpu = 0, have_lsx = 0, have_lasx = 0;
+    void *fp_ctx_p = NULL;
+    struct __nw_sctx_info *extinfo = (void *)&nw_ctx->uc_mcontext.__extcontext;
+    while (extinfo->magic)
+    {
+        switch (extinfo->magic)
+        {
+            case FPU_CTX_MAGIC:
+            {
+                struct __nw_fpu_context *fp_ctx = (void *)(extinfo + 1);
+                have_fpu = 1;
+                fp_ctx_p = fp_ctx;
+                ow_ctx.uc_mcontext.__fcsr = fp_ctx->fcsr;
+                ow_ctx.uc_mcontext.__fcc = fp_ctx->fcc;
+                for (int i = 0; i < 32; i++)
+                {
+                    ow_ctx.uc_mcontext.__fpregs[i].__val64[0] = fp_ctx->regs[i];
+                }
+                break;
+            }
+            case LSX_CTX_MAGIC:
+            {
+                struct __nw_lsx_context *fp_ctx = (void *)(extinfo + 1);
+                have_lsx = 1;
+                fp_ctx_p = fp_ctx;
+                ow_ctx.uc_mcontext.__fcsr = fp_ctx->fcsr;
+                ow_ctx.uc_mcontext.__fcc = fp_ctx->fcc;
+                for (int i = 0; i < 32; i++)
+                {
+                    ow_ctx.uc_mcontext.__fpregs[i].__val64[0] = fp_ctx->regs[i][0];
+                    ow_ctx.uc_mcontext.__fpregs[i].__val64[1] = fp_ctx->regs[i][1];
+                }
+                break;
+            }
+            case LASX_CTX_MAGIC:
+            {
+                struct __nw_lasx_context *fp_ctx = (void *)(extinfo + 1);
+                have_lasx = 1;
+                fp_ctx_p = fp_ctx;
+                ow_ctx.uc_mcontext.__fcsr = fp_ctx->fcsr;
+                ow_ctx.uc_mcontext.__fcc = fp_ctx->fcc;
+                for (int i = 0; i < 32; i++)
+                {
+                    ow_ctx.uc_mcontext.__fpregs[i].__val64[0] = fp_ctx->regs[i][0];
+                    ow_ctx.uc_mcontext.__fpregs[i].__val64[1] = fp_ctx->regs[i][1];
+                    ow_ctx.uc_mcontext.__fpregs[i].__val64[2] = fp_ctx->regs[i][2];
+                    ow_ctx.uc_mcontext.__fpregs[i].__val64[3] = fp_ctx->regs[i][3];
+                }
+                break;
+            }
+        }
+        if (have_fpu || have_lsx || have_lasx)
+        {
+            break;
+        }
+        extinfo = (struct __nw_sctx_info *)((void *)extinfo + extinfo->size);
+    }
+
+    real_handler (sig, info, &ow_ctx);
+
+    if (have_lasx)
+    {
+        struct __nw_lasx_context *fp_ctx = fp_ctx_p;
+        for (int i = 0; i < 32; i++)
+        {
+            fp_ctx->regs[i][0] = ow_ctx.uc_mcontext.__fpregs[i].__val64[0];
+            fp_ctx->regs[i][1] = ow_ctx.uc_mcontext.__fpregs[i].__val64[1];
+            fp_ctx->regs[i][2] = ow_ctx.uc_mcontext.__fpregs[i].__val64[2];
+            fp_ctx->regs[i][3] = ow_ctx.uc_mcontext.__fpregs[i].__val64[3];
+        }
+        fp_ctx->fcc = ow_ctx.uc_mcontext.__fcc;
+        fp_ctx->fcsr = ow_ctx.uc_mcontext.__fcsr;
+    }
+    else if (have_lsx)
+    {
+        struct __nw_lsx_context *fp_ctx = fp_ctx_p;
+        for (int i = 0; i < 32; i++)
+        {
+            fp_ctx->regs[i][0] = ow_ctx.uc_mcontext.__fpregs[i].__val64[0];
+            fp_ctx->regs[i][1] = ow_ctx.uc_mcontext.__fpregs[i].__val64[1];
+        }
+        fp_ctx->fcc = ow_ctx.uc_mcontext.__fcc;
+        fp_ctx->fcsr = ow_ctx.uc_mcontext.__fcsr;
+    }
+    else if (have_fpu)
+    {
+        struct __nw_fpu_context *fp_ctx = fp_ctx_p;
+        for (int i = 0; i < 32; i++)
+        {
+            fp_ctx->regs[i] = ow_ctx.uc_mcontext.__fpregs[i].__val64[0];
+        }
+        fp_ctx->fcc = ow_ctx.uc_mcontext.__fcc;
+        fp_ctx->fcsr = ow_ctx.uc_mcontext.__fcsr;
+    }
+    __copy_ow_nw (nw_ctx, &ow_ctx);
+}
+
+static inline int
+is_fake_handler (__linx_sighandler_t handler)
+{
+  return handler == (__linx_sighandler_t)SIG_ERR
+         || handler == (__linx_sighandler_t)SIG_DFL
+         || handler == (__linx_sighandler_t)SIG_IGN
+#ifdef SIG_HOLD
+         || handler == (__linx_sighandler_t)SIG_HOLD
+#endif
+      ;
+}
+
+
+#define LA_INS_PCADDI 0x18000000u
+#define LA_INS_LD_D 0x28C00000u
+#define LA_INS_JIRL 0x4C000000u
+#define LA_REG_ZERO 0
+#define LA_REG_T0 12
+#define LA_REG_RA 1
+#define LA_REG_A0 4
+#define LA_REG_A1 5
+#define LA_REG_A2 6
+#define LA_REG_A3 7
+#define LA_REG_A4 8
+#define LA_REG_A5 9
+
+#define SIGHANDLER_PROG_NR_INS 4
+struct __attribute__ ((__packed__, aligned (8))) sighandler_prog
+{
+  unsigned int magic[2];
+  unsigned int prog[SIGHANDLER_PROG_NR_INS];
+
+  struct sighandler_prog_data
+  {
+    unsigned long our_handler_addr;
+    unsigned long orig_handler_addr;
+  } data;
+} static const prog_tmpl = {
+  .magic = {U"开刀"},
+  .prog = {
+    /* pcaddi $t0, SIGHANDLER_PROG_NR_INS */
+    LA_INS_PCADDI | LA_REG_T0 | (SIGHANDLER_PROG_NR_INS << 5),
+    /* ld.d $a3, $t0, orig_handler_addr */
+    LA_INS_LD_D | LA_REG_A3 | (LA_REG_T0 << 5) | (offsetof (struct sighandler_prog_data, orig_handler_addr) << 10),
+    /* ld.d $t0, $t0, our_handler_addr */
+    LA_INS_LD_D | LA_REG_T0 | (LA_REG_T0 << 5) | (offsetof (struct sighandler_prog_data, our_handler_addr) << 10),
+    /* jirl $zero, $t0, 0 */
+    LA_INS_JIRL | LA_REG_ZERO | (LA_REG_T0 << 5) | (0 << 10),
+  },
+  .data = {
+    .our_handler_addr = (unsigned long)custom_handler,
+  }
+};
+
+
+#define PROG_POOL_SIZE 2
+#define LA_PAGE_SIZE (16 * 1024)
+
+static_assert (sizeof (struct sighandler_prog) <= LA_PAGE_SIZE,
+               "sighandler_prog too large");
+static_assert (SIGHANDLER_PROG_NR_INS < (1u << 19), "prog too long");
+static_assert (offsetof (struct sighandler_prog, data.our_handler_addr)
+                   == offsetof (struct sighandler_prog, prog)
+                          + sizeof (unsigned int) * SIGHANDLER_PROG_NR_INS,
+               "data offset wrong");
+static_assert (offsetof (struct sighandler_prog, data.our_handler_addr)
+                       % sizeof (unsigned long)
+                   == 0,
+               "data offset not aligned");
+static_assert (offsetof (struct sighandler_prog_data, orig_handler_addr)
+                   < (1u << 11),
+               "data too long");
+static_assert (offsetof (struct sighandler_prog_data, our_handler_addr)
+                   < (1u << 11),
+               "data too long");
+
+
+struct sighandler_prog_pool
+{
+  struct sighandler_prog *prog[PROG_POOL_SIZE];
+  size_t pos;
+#if !IS_IN(rtld)
+  __libc_lock_define (, lock);
+#endif
+};
+
+static void
+destroy_handler (struct sighandler_prog *prog)
+{
+  __munmap (prog, LA_PAGE_SIZE);
+}
+
+
+static struct sighandler_prog *
+alloc_handler (__linx_sighandler_t handler)
+{
+  struct sighandler_prog *prog
+      = __mmap (NULL, LA_PAGE_SIZE, PROT_READ | PROT_WRITE,
+                MAP_ANON | MAP_PRIVATE, -1, 0);
+  if (__glibc_unlikely (prog == MAP_FAILED))
+    {
+      return NULL;
+    }
+  memcpy (prog, &prog_tmpl, sizeof (struct sighandler_prog));
+  prog->data.orig_handler_addr = (unsigned long)handler;
+
+  int rc = __mprotect (prog, LA_PAGE_SIZE, PROT_READ | PROT_EXEC);
+  if (rc < 0)
+    {
+      destroy_handler (prog);
+      prog = NULL;
+    }
+  return prog;
+}
+
+
+static void
+store_handler (struct sighandler_prog_pool *pool, struct sighandler_prog *prog)
+{
+  struct sighandler_prog *orig_prog;
+  orig_prog = pool->prog[pool->pos];
+  pool->prog[pool->pos] = prog;
+  pool->pos = (pool->pos + 1) % PROG_POOL_SIZE;
+  if (orig_prog)
+    {
+      destroy_handler (orig_prog);
+    }
+}
+
+int __ow___sigaction (int sig, const struct sigaction *act, struct sigaction *oact)
+{
+    static struct sighandler_prog_pool prog_pool[NSIG]
+      = { [0 ... NSIG - 1] = {
+              .prog = { NULL },
+              .pos = 0,
+#if !IS_IN(rtld)
+              .lock = _LIBC_LOCK_INITIALIZER,
+#endif
+          } };
+
+    sigset_t saveset, allset;
+    struct sighandler_prog *old_prog = NULL;
+    struct sighandler_prog *new_prog = NULL;
+    int result = 0, result2 = 0;
+    struct sigaction iact, ioact;
+
+    if (sig <= 0 || sig >= __OW_NSIG || is_internal_signal (sig))
+    {
+        __set_errno (EINVAL);
+        return -1;
+    }
+
+    if (sig >= NSIG)
+    {
+        if (oact)
+        {
+            memset (oact, 0, sizeof (struct sigaction));
+            oact->sa_handler = SIG_IGN;
+        }
+        return 0;
+    }
+
+    if (act)
+    {
+        if (!is_fake_handler (act->sa_sigaction))
+        {
+            new_prog = alloc_handler (act->sa_sigaction);
+            if (!new_prog)
+            {
+              return -1;
+            }
+            iact.sa_sigaction = (__linx_sighandler_t)new_prog;
+        }
+        else
+        {
+            iact.sa_sigaction = act->sa_sigaction;
+        }
+        memcpy (&iact.sa_mask, &act->sa_mask, sizeof (sigset_t));
+        iact.sa_flags = act->sa_flags;
+    }
+    if (new_prog)
+    {
+        __sigfillset (&allset);
+        result = INLINE_SYSCALL_CALL (rt_sigprocmask, SIG_BLOCK, &allset,
+                                    &saveset, NSIG / 8);
+        if (result < 0)
+        {
+            destroy_handler (new_prog);
+            return result;
+        }
+
+#if !IS_IN(rtld)
+        __libc_lock_lock (prog_pool[sig].lock);
+#endif
+    }
+    result = __libc_sigaction (sig, act ? &iact : NULL, oact ? &ioact : NULL);
+    if (result < 0)
+    {
+        if (new_prog)
+        {
+            destroy_handler (new_prog);
+        }
+        goto out_unlock;
+    }
+    if (oact)
+    {
+        oact->sa_sigaction = ioact.sa_sigaction;
+        if (!is_fake_handler (ioact.sa_sigaction))
+        {
+            old_prog = (struct sighandler_prog *)ioact.sa_sigaction;
+            if (memcmp (old_prog->magic, prog_tmpl.magic,
+                      sizeof (prog_tmpl.magic))
+              == 0)
+            {
+                oact->sa_sigaction
+                    = (__linx_sighandler_t)old_prog->data.orig_handler_addr;
+            }
+        }
+        memcpy (&oact->sa_mask, &ioact.sa_mask, NSIG / 8);
+        __ow_clear_unused_bits (&oact->sa_mask);
+        oact->sa_flags = ioact.sa_flags;
+    }
+    if (new_prog)
+        store_handler (&prog_pool[sig], new_prog);
+
+out_unlock:
+    if (new_prog)
+    {
+#if !IS_IN(rtld)
+        __libc_lock_unlock (prog_pool[sig].lock);
+#endif
+
+        result2 = INLINE_SYSCALL_CALL (rt_sigprocmask, SIG_SETMASK, &saveset,
+                                       NULL, NSIG / 8);
+    if (result2 < 0)
+        result = result2;
+    }
+    return result;
+}
+
+#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_36)
+compat_symbol (libc, __ow___sigaction, sigaction, GLIBC_2_0);
+compat_symbol (libc, __ow___sigaction, __sigaction, GLIBC_2_0);
+#endif
+
+#if OTHER_SHLIB_COMPAT(libpthread, GLIBC_2_0, GLIBC_2_34)
+compat_symbol (libpthread, __ow___sigaction, sigaction, GLIBC_2_0);
+compat_symbol (libpthread, __ow___sigaction, __sigaction, GLIBC_2_0);
+#endif
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/swapcontext.S b/sysdeps/unix/sysv/linux/loongarch/swapcontext.S
index e58d5c0c..d69540ef 100644
--- a/sysdeps/unix/sysv/linux/loongarch/swapcontext.S
+++ b/sysdeps/unix/sysv/linux/loongarch/swapcontext.S
@@ -16,6 +16,7 @@
    License along with the GNU C Library.  If not, see
    <https://www.gnu.org/licenses/>.  */
 
+#include <shlib-compat.h>
 #include "ucontext-macros.h"
 
 /* int swapcontext (ucontext_t *oucp, const ucontext_t *ucp) */
@@ -92,4 +93,4 @@ LEAF (__swapcontext)
 
 PSEUDO_END (__swapcontext)
 
-weak_alias (__swapcontext, swapcontext)
+versioned_symbol (libc, __swapcontext, swapcontext, GLIBC_2_36);
-- 
2.43.0

