From cf322ba313a0a4ec8581470d1fb7a0f8d05249b1 Mon Sep 17 00:00:00 2001
From: Miao Wang <shankerwangmiao@gmail.com>
Date: Sat, 13 Jan 2024 06:35:35 +0800
Subject: [PATCH 03/10] add signal functions

---
 sysdeps/loongarch/nptl/pthread_sigmask.c      | 73 +++++++++++++++++++
 sysdeps/unix/sysv/linux/loongarch/ow_sigop.h  |  8 ++
 .../unix/sysv/linux/loongarch/sigpending.c    | 22 ++++++
 .../unix/sysv/linux/loongarch/sigprocmask.c   | 20 +++++
 .../unix/sysv/linux/loongarch/sigsuspend.c    |  1 +
 .../unix/sysv/linux/loongarch/sigtimedwait.c  |  1 +
 sysdeps/unix/sysv/linux/loongarch/sigwait.c   | 10 +++
 .../unix/sysv/linux/loongarch/sigwaitinfo.c   |  1 +
 .../linux/loongarch/spawnattr_setdefault.c    |  1 +
 .../linux/loongarch/spawnattr_setsigmask.c    |  1 +
 10 files changed, 138 insertions(+)
 create mode 100644 sysdeps/loongarch/nptl/pthread_sigmask.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/sigpending.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/sigprocmask.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/sigsuspend.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/sigtimedwait.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/sigwait.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/sigwaitinfo.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/spawnattr_setdefault.c
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/spawnattr_setsigmask.c

diff --git a/sysdeps/loongarch/nptl/pthread_sigmask.c b/sysdeps/loongarch/nptl/pthread_sigmask.c
new file mode 100644
index 00000000..d6947000
--- /dev/null
+++ b/sysdeps/loongarch/nptl/pthread_sigmask.c
@@ -0,0 +1,73 @@
+/* Copyright (C) 2002-2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#include <signal.h>
+#include <pthreadP.h>
+#include <sysdep.h>
+#include <shlib-compat.h>
+
+int
+__pthread_sigmask (int how, const sigset_t *newmask, sigset_t *oldmask)
+{
+  sigset_t local_newmask;
+
+  /* The only thing we have to make sure here is that SIGCANCEL and
+     SIGSETXID is not blocked.  */
+  if (newmask != NULL
+      && (__glibc_unlikely (__sigismember (newmask, SIGCANCEL))
+         || __glibc_unlikely (__sigismember (newmask, SIGSETXID))))
+    {
+      local_newmask = *newmask;
+      clear_internal_signals (&local_newmask);
+      newmask = &local_newmask;
+    }
+
+  /* We know that realtime signals are available if NPTL is used.  */
+  int result = INTERNAL_SYSCALL_CALL (rt_sigprocmask, how, newmask,
+				      oldmask, __NSIG_BYTES);
+
+  return (INTERNAL_SYSCALL_ERROR_P (result)
+	  ? INTERNAL_SYSCALL_ERRNO (result)
+	  : 0);
+}
+libc_hidden_def (__pthread_sigmask)
+
+versioned_symbol (libc, __pthread_sigmask, pthread_sigmask, GLIBC_2_36);
+
+#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_36)
+
+#include<sysdeps/unix/sysv/linux/loongarch/ow_sigop.h>
+
+int
+__ow___pthread_sigmask (int how, const sigset_t *newmask, sigset_t *oldmask)
+{
+  int rc = __pthread_sigmask (how, newmask, oldmask);
+  if (rc >= 0 && oldmask != NULL){
+    __ow_clear_unused_bits(oldmask);
+  }
+  return rc;
+}
+#if SHLIB_COMPAT (libc, GLIBC_2_32, GLIBC_2_36)
+compat_symbol (libc, __ow___pthread_sigmask, pthread_sigmask, GLIBC_2_32);
+#endif
+
+#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_32)
+strong_alias (__ow___pthread_sigmask, __ow___pthread_sigmask_2);
+compat_symbol (libc, __ow___pthread_sigmask_2, pthread_sigmask, GLIBC_2_0);
+#endif
+
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/ow_sigop.h b/sysdeps/unix/sysv/linux/loongarch/ow_sigop.h
index f06836b8..a74c2240 100644
--- a/sysdeps/unix/sysv/linux/loongarch/ow_sigop.h
+++ b/sysdeps/unix/sysv/linux/loongarch/ow_sigop.h
@@ -1,4 +1,5 @@
 #include <signal.h>
+#include <string.h>
 
 extern int __ow_sigaddset(sigset_t *, int);
 extern int __ow_sigdelset(sigset_t *, int);
@@ -6,3 +7,10 @@ extern int __ow_sigemptyset(sigset_t *);
 extern int __ow_sigfillset(sigset_t *);
 extern int __ow_sigandset (sigset_t *__set, const sigset_t *__left, const sigset_t *__right);
 extern int __ow_sigorset (sigset_t *__set, const sigset_t *__left, const sigset_t *__right);
+
+#define __OW_NSIG 128
+
+static inline void __ow_clear_unused_bits(sigset_t *set)
+{
+    memset ((void *)set + (NSIG / 8), 0, (__OW_NSIG - NSIG) / 8);
+}
diff --git a/sysdeps/unix/sysv/linux/loongarch/sigpending.c b/sysdeps/unix/sysv/linux/loongarch/sigpending.c
new file mode 100644
index 00000000..238c27ad
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/sigpending.c
@@ -0,0 +1,22 @@
+#include<shlib-compat.h>
+
+#include<signal.h>
+
+#define sigpending __sigpending
+#include<sysdeps/unix/sysv/linux/sigpending.c>
+#undef sigpending
+
+versioned_symbol (libc, __sigpending, sigpending, GLIBC_2_36);
+
+#if SHLIB_COMPAT(libc, GLIBC_2_0, GLIBC_2_36)
+#include "ow_sigop.h"
+int __ow_sigpending (sigset_t *set)
+{
+    int rc = __sigpending (set);
+    if (rc >= 0){
+        __ow_clear_unused_bits(set);
+    }
+    return rc;
+}
+compat_symbol (libc, __ow_sigpending, sigpending, GLIBC_2_0);
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/sigprocmask.c b/sysdeps/unix/sysv/linux/loongarch/sigprocmask.c
new file mode 100644
index 00000000..17aa8572
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/sigprocmask.c
@@ -0,0 +1,20 @@
+#include <shlib-compat.h>
+
+#undef weak_alias
+#define weak_alias(name, aliasname)
+#include <sysdeps/unix/sysv/linux/sigprocmask.c>
+
+versioned_symbol (libc, __sigprocmask, sigprocmask, GLIBC_2_36);
+
+#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_36)
+#include "ow_sigop.h"
+int __ow_sigprocmask (int how, const sigset_t *set, sigset_t *oldset)
+{
+    int rc = __sigprocmask (how, set, oldset);
+    if (rc >= 0 && oldset != NULL){
+        __ow_clear_unused_bits(oldset);
+    }
+    return rc;
+}
+compat_symbol (libc, __ow_sigprocmask, sigprocmask, GLIBC_2_0);
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/sigsuspend.c b/sysdeps/unix/sysv/linux/loongarch/sigsuspend.c
new file mode 100644
index 00000000..9351c54b
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/sigsuspend.c
@@ -0,0 +1 @@
+#include<sysdeps/unix/sysv/linux/sigsuspend.c>
diff --git a/sysdeps/unix/sysv/linux/loongarch/sigtimedwait.c b/sysdeps/unix/sysv/linux/loongarch/sigtimedwait.c
new file mode 100644
index 00000000..65636bb6
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/sigtimedwait.c
@@ -0,0 +1 @@
+#include<sysdeps/unix/sysv/linux/sigtimedwait.c>
diff --git a/sysdeps/unix/sysv/linux/loongarch/sigwait.c b/sysdeps/unix/sysv/linux/loongarch/sigwait.c
new file mode 100644
index 00000000..e11d42f2
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/sigwait.c
@@ -0,0 +1,10 @@
+#include<shlib-compat.h>
+
+#undef weak_alias
+#define weak_alias(name, aliasname)
+#include<sysdeps/unix/sysv/linux/sigwait.c>
+
+versioned_symbol (libc, __sigwait, sigwait, GLIBC_2_0);
+#if OTHER_SHLIB_COMPAT(libpthread, GLIBC_2_0, GLIBC_2_34)
+compat_symbol (libpthread, __sigwait, sigwait, GLIBC_2_0);
+#endif
diff --git a/sysdeps/unix/sysv/linux/loongarch/sigwaitinfo.c b/sysdeps/unix/sysv/linux/loongarch/sigwaitinfo.c
new file mode 100644
index 00000000..36edb293
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/sigwaitinfo.c
@@ -0,0 +1 @@
+#include<sysdeps/unix/sysv/linux/sigwaitinfo.c>
diff --git a/sysdeps/unix/sysv/linux/loongarch/spawnattr_setdefault.c b/sysdeps/unix/sysv/linux/loongarch/spawnattr_setdefault.c
new file mode 100644
index 00000000..f75f1f16
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/spawnattr_setdefault.c
@@ -0,0 +1 @@
+#include<posix/spawnattr_setdefault.c>
diff --git a/sysdeps/unix/sysv/linux/loongarch/spawnattr_setsigmask.c b/sysdeps/unix/sysv/linux/loongarch/spawnattr_setsigmask.c
new file mode 100644
index 00000000..a95cf5da
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/spawnattr_setsigmask.c
@@ -0,0 +1 @@
+#include<posix/spawnattr_setsigmask.c>
-- 
2.43.0

